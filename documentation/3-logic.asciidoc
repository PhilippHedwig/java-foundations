:toc: macro
toc::[]

= Order Service - Logic Layer

In this chapter we are going to create business logic layer for already implemented database entities, repositories, and queries.
We are going to prepare transfer-objects and use-cases together with facades and proper component tests.

== Transfer objects

In the link:2-dataaccess.asciidoxc[dataaccess exercise] you have created the _Entity infrastructure_.
Now, we create transfer-objects.

*ATTENTION:* We create ETOs in the `api` module (not in `core`)

For each entity we create an `ETO`:

* `OrderEto` for `OrderEntity`
* `ItemEto` for `ItemEntity`

Add all properties from `Entity` to `Eto` except for relations.

image::images/TOs.png[width="100%"]

== Use-Cases

Now that we have created ETOs we create use-cases for CRUD functionality on our business-objects:

* `UcFindItem[Impl]`
* `UcFindOrder[Impl]`
* `UcManageItem[Impl]`
* `UcManageOrder[Impl]`

image::images/UCs.png[width="100%"]

Each of use-case implementation shall be annotated as following:
[source,java]
----
@Named
@Transactional
----

== Component-Facade

If other components or the service-layer want to use these use-cases, we can compose them as component-facade: `Ordermanagement[Impl]`

* The interface simply extends all use-case interfaces
* The implementation gets all use-cases injected and delegates to them in the method implementations.

Example:
[source,java]
----
  @Override
  public OrderEto findOrder(IdRef<Order> id) {

    return this.ucFindOrder.findOrder(id);
  }
----

image::images/Facade.png[width="100%"]

== Links

* https://github.com/devonfw/devon4j/blob/develop/documentation/guide-logic-layer.asciidoc#logic-layer[devon4j: Logic-Layer]
* https://github.com/devonfw/devon4j/blob/develop/documentation/guide-usecase.asciidoc#usecase[devon4j: Use-Cases]
* https://github.com/devonfw/devon4j/blob/develop/documentation/guide-component-facade.asciidoc#component-facade[devon4j: Component-Facade]